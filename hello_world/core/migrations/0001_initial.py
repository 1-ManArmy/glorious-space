# Generated by Django 5.2.5 on 2025-09-03 08:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True, help_text='Your royal story', max_length=1000)),
                ('avatar', models.ImageField(blank=True, help_text='Your noble portrait', null=True, upload_to='avatars/')),
                ('location', models.CharField(blank=True, help_text="Your kingdom's location", max_length=100)),
                ('website', models.URLField(blank=True, help_text='Your digital castle')),
                ('title', models.CharField(blank=True, help_text='Your noble title', max_length=100)),
                ('company', models.CharField(blank=True, help_text='Your royal court', max_length=100)),
                ('skills', models.JSONField(default=list, help_text='Your magical abilities')),
                ('experience_level', models.CharField(choices=[('apprentice', 'Apprentice Mage'), ('journeyman', 'Journeyman Developer'), ('expert', 'Expert Craftsman'), ('master', 'Master Wizard'), ('grandmaster', 'Grandmaster Architect')], default='apprentice', max_length=20)),
                ('github_username', models.CharField(blank=True, max_length=100)),
                ('linkedin_url', models.URLField(blank=True)),
                ('twitter_handle', models.CharField(blank=True, max_length=100)),
                ('discord_username', models.CharField(blank=True, max_length=100)),
                ('theme_preference', models.CharField(choices=[('royal_purple', 'Royal Purple'), ('midnight_gold', 'Midnight Gold'), ('emerald_crown', 'Emerald Crown'), ('sapphire_throne', 'Sapphire Throne')], default='royal_purple', max_length=20)),
                ('notification_preferences', models.JSONField(default=dict, help_text='Notification settings')),
                ('privacy_settings', models.JSONField(default=dict, help_text='Privacy configuration')),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('is_online', models.BooleanField(default=False)),
                ('total_projects', models.PositiveIntegerField(default=0)),
                ('total_contributions', models.PositiveIntegerField(default=0)),
                ('reputation_score', models.PositiveIntegerField(default=0)),
                ('badges', models.JSONField(default=list, help_text='Earned achievement badges')),
                ('certifications', models.JSONField(default=list, help_text='Professional certifications')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'glorious_users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AIConversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Conversation title', max_length=200)),
                ('ai_model', models.CharField(choices=[('claude-3', 'Claude 3'), ('gpt-4', 'GPT-4'), ('gemini-pro', 'Gemini Pro'), ('llama-2', 'Llama 2'), ('custom', 'Custom Model')], default='claude-3', max_length=50)),
                ('mode', models.CharField(choices=[('general', 'General Chat'), ('code_assistant', 'Code Assistant'), ('debug_helper', 'Debug Helper'), ('ai_training', 'AI Training'), ('web3_guide', 'Web3 Guide'), ('canvas_expert', 'Canvas Expert')], default='general', max_length=20)),
                ('system_prompt', models.TextField(blank=True, help_text='Custom system prompt')),
                ('temperature', models.FloatField(default=0.7, help_text='AI temperature setting', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.PositiveIntegerField(default=2048, help_text='Maximum response tokens')),
                ('total_messages', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('estimated_cost', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_shared', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_ai_conversations',
                'ordering': ['-last_message_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'AI Assistant'), ('system', 'System')], max_length=20)),
                ('content', models.TextField(help_text='Message content')),
                ('has_voice_input', models.BooleanField(default=False)),
                ('voice_input_url', models.URLField(blank=True, help_text='Voice input recording')),
                ('has_voice_output', models.BooleanField(default=False)),
                ('voice_output_url', models.URLField(blank=True, help_text='Voice output audio')),
                ('model_used', models.CharField(blank=True, max_length=50)),
                ('response_time', models.FloatField(help_text='Response time in seconds', null=True)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('confidence_score', models.FloatField(null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_code_block', models.BooleanField(default=False)),
                ('programming_language', models.CharField(blank=True, max_length=50)),
                ('attachments', models.JSONField(default=list, help_text='Message attachments')),
                ('user_rating', models.IntegerField(blank=True, help_text='User rating (1-5 stars)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user_feedback', models.TextField(blank=True, help_text='User feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.aiconversation')),
            ],
            options={
                'db_table': 'glorious_ai_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Room name', max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Room description')),
                ('room_type', models.CharField(choices=[('public', 'Public Room'), ('private', 'Private Room'), ('project', 'Project Room'), ('team', 'Team Room'), ('dm', 'Direct Message')], default='public', max_length=20)),
                ('max_members', models.PositiveIntegerField(default=100)),
                ('allow_voice_chat', models.BooleanField(default=True)),
                ('allow_video_chat', models.BooleanField(default=True)),
                ('allow_file_sharing', models.BooleanField(default=True)),
                ('is_moderated', models.BooleanField(default=False)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('message_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_chat_rooms',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(help_text='Message content')),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('image', 'Image'), ('file', 'File'), ('voice', 'Voice Message'), ('video', 'Video Message'), ('system', 'System Message'), ('code', 'Code Snippet')], default='text', max_length=20)),
                ('attachment_url', models.URLField(blank=True, help_text='Attachment URL')),
                ('attachment_metadata', models.JSONField(default=dict, help_text='File metadata')),
                ('is_edited', models.BooleanField(default=False)),
                ('edit_history', models.JSONField(default=list, help_text='Edit history')),
                ('reactions', models.JSONField(default=dict, help_text='Message reactions')),
                ('is_pinned', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='core.chatmessage')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.chatroom')),
            ],
            options={
                'db_table': 'glorious_chat_messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoomMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Administrator')], default='member', max_length=20)),
                ('is_muted', models.BooleanField(default=False)),
                ('is_banned', models.BooleanField(default=False)),
                ('last_read_at', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_chat_memberships',
            },
        ),
        migrations.AddField(
            model_name='chatroom',
            name='members',
            field=models.ManyToManyField(related_name='chat_rooms', through='core.ChatRoomMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message')),
                ('notification_type', models.CharField(choices=[('project_invitation', 'Project Invitation'), ('project_update', 'Project Update'), ('chat_message', 'Chat Message'), ('ai_conversation', 'AI Conversation'), ('collaboration_request', 'Collaboration Request'), ('system_update', 'System Update'), ('achievement', 'Achievement Unlocked'), ('reminder', 'Reminder'), ('security', 'Security Alert')], default='system_update', max_length=30)),
                ('action_url', models.URLField(blank=True, help_text='URL for notification action')),
                ('action_label', models.CharField(blank=True, help_text='Action button label', max_length=50)),
                ('related_object_type', models.CharField(blank=True, max_length=50)),
                ('related_object_id', models.CharField(blank=True, max_length=100)),
                ('is_read', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('email_sent', models.BooleanField(default=False)),
                ('push_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text="Your project's royal name", max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly version', max_length=200, unique=True)),
                ('description', models.TextField(help_text='Describe your masterpiece')),
                ('tech_stack', models.JSONField(default=list, help_text='Technologies used')),
                ('category', models.CharField(choices=[('web_app', 'Web Application'), ('mobile_app', 'Mobile Application'), ('desktop_app', 'Desktop Application'), ('game', 'Game Development'), ('ai_ml', 'AI/Machine Learning'), ('blockchain', 'Blockchain/Web3'), ('iot', 'Internet of Things'), ('data_science', 'Data Science'), ('devtools', 'Developer Tools'), ('library', 'Library/Framework'), ('other', 'Other')], default='web_app', max_length=50)),
                ('repository_url', models.URLField(blank=True, help_text='Source code repository')),
                ('live_demo_url', models.URLField(blank=True, help_text='Live demonstration')),
                ('documentation_url', models.URLField(blank=True, help_text='Project documentation')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='project_thumbnails/')),
                ('gallery_images', models.JSONField(default=list, help_text='Additional project images')),
                ('demo_video_url', models.URLField(blank=True, help_text='Demo video URL')),
                ('status', models.CharField(choices=[('planning', 'Planning Phase'), ('development', 'In Development'), ('testing', 'Testing Phase'), ('deployed', 'Deployed'), ('maintenance', 'Maintenance'), ('archived', 'Archived')], default='planning', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('team_only', 'Team Only')], default='public', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Featured on homepage')),
                ('allow_collaboration', models.BooleanField(default=True, help_text='Allow others to contribute')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('fork_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('tags', models.JSONField(default=list, help_text='Project tags for discovery')),
                ('meta_description', models.CharField(blank=True, help_text='SEO description', max_length=160)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectCollaboration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('viewer', 'Viewer'), ('contributor', 'Contributor'), ('maintainer', 'Maintainer'), ('admin', 'Administrator')], default='contributor', max_length=20)),
                ('permissions', models.JSONField(default=dict, help_text='Specific permissions')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('invitation_accepted_at', models.DateTimeField(blank=True, null=True)),
                ('collaborator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.project')),
            ],
            options={
                'db_table': 'glorious_project_collaborations',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='collaborators',
            field=models.ManyToManyField(related_name='collaborated_projects', through='core.ProjectCollaboration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Configuration key', max_length=100, unique=True)),
                ('value', models.JSONField(help_text='Configuration value')),
                ('description', models.TextField(help_text='Configuration description')),
                ('is_public', models.BooleanField(default=False, help_text='Publicly accessible configuration')),
                ('is_sensitive', models.BooleanField(default=False, help_text='Contains sensitive information')),
                ('category', models.CharField(choices=[('general', 'General Settings'), ('ai', 'AI Configuration'), ('chat', 'Chat Settings'), ('security', 'Security Settings'), ('features', 'Feature Flags'), ('integrations', 'Third-party Integrations')], default='general', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'glorious_system_config',
                'ordering': ['category', 'key'],
                'indexes': [models.Index(fields=['category'], name='glorious_sy_categor_99277a_idx'), models.Index(fields=['is_public'], name='glorious_sy_is_publ_80fa1c_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('project_created', 'Project Created'), ('project_updated', 'Project Updated'), ('project_viewed', 'Project Viewed'), ('chat_message_sent', 'Chat Message Sent'), ('ai_conversation_started', 'AI Conversation Started'), ('collaboration_joined', 'Collaboration Joined'), ('profile_updated', 'Profile Updated'), ('achievement_unlocked', 'Achievement Unlocked')], max_length=30)),
                ('description', models.TextField(help_text='Activity description')),
                ('metadata', models.JSONField(default=dict, help_text='Activity metadata')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client information')),
                ('related_object_type', models.CharField(blank=True, max_length=50)),
                ('related_object_id', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'glorious_user_activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['username'], name='glorious_us_usernam_bff57d_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='glorious_us_email_0e5b7b_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['last_active'], name='glorious_us_last_ac_818990_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['reputation_score'], name='glorious_us_reputat_04b592_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['user', 'is_active'], name='glorious_ai_user_id_824000_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['ai_model', 'mode'], name='glorious_ai_ai_mode_bc6c98_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['last_message_at'], name='glorious_ai_last_me_2a9c3a_idx'),
        ),
        migrations.AddIndex(
            model_name='aimessage',
            index=models.Index(fields=['conversation', 'created_at'], name='glorious_ai_convers_7b7997_idx'),
        ),
        migrations.AddIndex(
            model_name='aimessage',
            index=models.Index(fields=['role', 'created_at'], name='glorious_ai_role_6e9ba7_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['room', 'created_at'], name='glorious_ch_room_id_c45eac_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender', 'created_at'], name='glorious_ch_sender__7d9d84_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['message_type'], name='glorious_ch_message_f5b515_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroommembership',
            index=models.Index(fields=['room', 'role'], name='glorious_ch_room_id_601eed_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroommembership',
            index=models.Index(fields=['user', 'joined_at'], name='glorious_ch_user_id_1810bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatroommembership',
            unique_together={('room', 'user')},
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['room_type', 'owner'], name='glorious_ch_room_ty_423df3_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['last_activity'], name='glorious_ch_last_ac_9d6e6d_idx'),
        ),
        migrations.AddIndex(
            model_name='chatroom',
            index=models.Index(fields=['created_at'], name='glorious_ch_created_1520e0_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read'], name='glorious_no_recipie_b65ef8_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type', 'created_at'], name='glorious_no_notific_39e095_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='glorious_no_created_d75161_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcollaboration',
            index=models.Index(fields=['project', 'role'], name='glorious_pr_project_dea426_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcollaboration',
            index=models.Index(fields=['collaborator'], name='glorious_pr_collabo_7619f9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectcollaboration',
            unique_together={('project', 'collaborator')},
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['owner', 'status'], name='glorious_pr_owner_i_88853a_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['category', 'visibility'], name='glorious_pr_categor_cecef7_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['created_at'], name='glorious_pr_created_866484_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['is_featured'], name='glorious_pr_is_feat_90d84c_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'activity_type'], name='glorious_us_user_id_58b573_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['created_at'], name='glorious_us_created_e3bad8_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type', 'created_at'], name='glorious_us_activit_9414df_idx'),
        ),
    ]
